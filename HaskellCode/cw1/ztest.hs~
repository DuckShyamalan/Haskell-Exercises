findBusyBeavers :: [Int] -> [[Instruction]]
findBusyBeavers [] = []
findBusyBeavers xs | tryMultiply xs > tryAdd xs && tryMultiply xs > tryPop xs= [[Multiply]]
                   | tryAdd xs > tryMultiply xs && tryAdd xs > tryPop xs = [[Add]]
                   | tryPop xs > tryAdd xs && tryPop xs > tryMultiply xs = [[Pop]]
                   | tryMultiply xs > tryAdd xs && tryMultiply xs == tryPop xs = [[Pop],[Multiply]]
                   | tryAdd xs > tryMultiply xs && tryAdd xs == tryPop xs = [[Pop],[Add]]
                   | tryAdd xs == tryMultiply xs && tryAdd xs > tryPop xs = [[Multiply],[Add]]
                   | otherwise = [[Pop],[Multiply],[Add]]

tryMultiply :: [Int] -> Int
tryMultiply [] = 0
tryMultiply ns = head ns * head (tail ns)

tryAdd :: [Int] -> Int
tryAdd [] = 0
tryAdd ns = head ns + head (tail ns)

tryPop:: [Int] -> Int
tryPop [] = 0
tryPop ns = head (tail ns)